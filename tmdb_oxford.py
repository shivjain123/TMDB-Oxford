# -*- coding: utf-8 -*-
"""TMDB_Oxford.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RlC7oIuSuQrwvxQjXVJntfOPkc7_wkxT
"""

import tkinter as tk
import pandas as pd
import plotly.express as px
import requests as req
import datetime as dt
import textblob as txb
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg as fctk
from sklearn import tree
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score as acs
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split as tts

#Fetching data from 1 page
r = req.get('https://api.themoviedb.org/3/movie/top_rated?api_key=f6c15bcd5beaddd534c3b219bae978a2&language=en-US&page=1')
r.json()['results']

df = pd.DataFrame(r.json()['results'])[
    ['id', 'title', 'overview', 'popularity', 'release_date', 'vote_average', 'vote_count']
]
#df.head()

#Fetching data from all the pages
for i in range(1, 429):
    r = req.get('https://api.themoviedb.org/3/movie/top_rated?api_key=f6c15bcd5beaddd534c3b219bae978a2&language=en-US&page={}'.format(i))
    temporary_df = pd.DataFrame(r.json()['results'])[
        ['id', 'title', 'overview', 'popularity', 'release_date', 'vote_average', 'vote_count']
    ]
    df = df.append(temporary_df, ignore_index=True)
#temporary_df.head()

#Converting to CSV
df.to_csv('movies.csv')
#df.head()

#Arranging according to vote count
df.sort_values(by='vote_count', ascending=False)[['title', 'vote_count']]
#df.head()

#Arranging according to vote average
df.sort_values(by='vote_average', ascending=False)[['title', 'vote_average']]
#df.head()

#Arranging according to vote count
df.sort_values(by='popularity', ascending=False)[['title', 'popularity']]
#df.head()

df['release date'] = pd.to_datetime(df['release_date'])
df['year'] = df['release date'].dt.year

#df['year'].head()

figure = px.scatter(df, x="year", y="vote_count")
#figure.show()

df['scores'] = df['overview'].apply(
    lambda x: txb.TextBlob(x).sentiment.polarity)
df.head()


def map_scores(scores):
  if scores > 0.0:
    return 'positive'
  else:
    return 'negative'


df["Labels"] = df["scores"].apply(lambda x: map_scores(x))
#df.head()

d = {'positive': 1, 'negative': 0}
df["Labels"] = df["Labels"].map(d)
#df.head()

features = ['popularity', 'vote_average', 'vote_count']
x = df[features]
y = df['Labels']

x_train, x_test, y_train, y_test = tts(x, y, test_size=0.2, random_state=6)

to_describe_df = df[["id", "popularity", "vote_average", "vote_count"]]
to_describe_df.describe()

dt = DecisionTreeClassifier(max_depth=3)

dt.fit(x_train, y_train)

y_predict = dt.predict(x_test)
accuracy = acs(y_test, y_predict)
print(f"The Accuracy Score obtained by the Decision Tree is {accuracy}.")

tree.plot_tree(dt)
plt.show()

lr = LogisticRegression(random_state=0)

lr.fit(x_train, y_train)

logistic_pred = lr.predict(x_test)
logistic_acs_score = acs(y_test, logistic_pred)

print(f"The Accuracy Score obtained by Logistic Regression is {logistic_acs_score}.")

#tkinter GUI
root = tk.Tk()

canvas1 = tk.Canvas(root, width=500, height=300)
canvas1.pack()

#Popularity Label and Input Box
label1 = tk.Label(root, text = " Popularity : ")
canvas1.create_window(100, 100, window = label1)

entry1 = tk.Entry(root)
canvas1.create_window(270, 100, window = entry1)

# Average Vote label and input box
label2 = tk.Label(root, text=' Average Vote : ')
canvas1.create_window(100, 120, window=label2)

entry2 = tk.Entry(root)
canvas1.create_window(270, 120, window=entry2)

# Vote Count label and input box
label3 = tk.Label(root, text=' Vote Count : ')
canvas1.create_window(100, 140, window=label3)

entry3 = tk.Entry(root) 
canvas1.create_window(270, 140, window=entry3)

def values():
 #global Open our 1st input variable
 popularity = float(entry1.get())
 #global Close our 2nd input variable
 vote_average = float(entry2.get())
 # global Open our 3rd input variable
 vote_count = float(entry3.get())
 prediction = dt.predict([[popularity, vote_average, vote_count]])
 Prediction_result = ('Predict Go for movie or not: ', prediction)
 label_Prediction = tk.Label(root, text= Prediction_result, bg='orange')
 canvas1.create_window(200, 230, window=label_Prediction)

#Button to call the 'values' command above
button1 = tk.Button (root, text='Predict Go for movie or not',command=values, bg='orange') 
canvas1.create_window(200, 190, window=button1)

#Scatter Plot
interface_plot = plt.Figure(figsize = (5, 4), dpi = 100)
ax = interface_plot.add_subplot(111)
ax.scatter(df['year'].astype(float), df['vote_count'].astype(float), color='r')

scatter1 = fctk(interface_plot, root)
scatter1.get_tk_widget().pack(side = tk.RIGHT, fill = tk.BOTH)

ax.set_xlabel('Year')
ax.set_title('Vote Count')

root.mainloop()